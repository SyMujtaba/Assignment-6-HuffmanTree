#include <iostream>
#include <vector>
#include <queue>

// Define a Node structure for the Huffman tree
struct Node {
    char data;
    unsigned freq;
    Node *left, *right;
    
    Node(char data, unsigned freq) : data(data), freq(freq), left(nullptr), right(nullptr) {}
};

// Comparator for the priority queue
struct compare {
    bool operator()(Node* l, Node* r) {
        return (l->freq > r->freq);
    }
};

// Function to print the Huffman codes from the tree
void printCodes(struct Node* root, std::string str) {
    if (!root) return;
    
    // If this is a leaf node (i.e., it contains a character), print the character and its code
    if (root->data != '$') {
        std::cout << root->data << ": " << str << "\n";
    }

    printCodes(root->left, str + "0");
    printCodes(root->right, str + "1");
}

// Function to build the Huffman tree and print codes
void buildHuffmanTree(const std::vector<char>& data, const std::vector<int>& freq, size_t size) {
    struct Node *left, *right, *top;
    
    // Create a min heap & insert all characters of data[]
    std::priority_queue<Node*, std::vector<Node*>, compare> minHeap;
    
    for (size_t i = 0; i < size; ++i) {
        minHeap.push(new Node(data[i], freq[i]));
    }
    
    // Iterate until size of heap doesn't become 1
    while (minHeap.size() != 1) {
        // Extract the two minimum freq items from min heap
        left = minHeap.top();
        minHeap.pop();
        right = minHeap.top();
        minHeap.pop();
        
        // Create a new internal node with frequency equal to the sum of the two nodes frequencies.
        // '$' is a special value for internal nodes, not used
        top = new Node('$', left->freq + right->freq);
        
        top->left = left;
        top->right = right;
        
        minHeap.push(top);
    }
    
    // Print Huffman codes using the Huffman tree built above
    printCodes(minHeap.top(), "");
}

int main() {
    std::vector<char> data = {'a', 'b', 'c', 'd', 'e', 'f'};
    std::vector<int> freq = {5, 9, 12, 13, 16, 45};
    size_t size = data.size();
    
    buildHuffmanTree(data, freq, size);
    
    return 0;
}
